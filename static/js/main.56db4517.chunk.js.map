{"version":3,"sources":["monsters_rolodex/components/card/card.js","monsters_rolodex/components/card-list/card_list.js","monsters_rolodex/components/search_box/search_box.js","monsters_rolodex/App.js","index.js"],"names":["Card","props","react_default","a","createElement","key","monster","id","className","src","concat","alt","name","email","CardList","Fragment","monsters","map","card_Card","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","catch","error","console","log","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_SearchBox","card_list_CardList","Component","ReactDOM","render","monsters_rolodex_App","document","getElementById"],"mappings":"yRAEaA,SAAO,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,QAAQC,GAAIC,UAAU,kBACpCN,EAAAC,EAAAC,cAAA,OAEEK,IAAG,wBAAAC,OAA0BT,EAAMK,QAAQC,GAAxC,0BACHI,IAAG,UAAAD,OAAYT,EAAMK,QAAQC,MAE/BL,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,QAAQM,MACnBV,EAAAC,EAAAC,cAAA,SAAIH,EAAMK,QAAQO,UCLXC,SAAW,SAACb,GACvB,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAY,SAAA,KACEb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACZP,EAAMe,SAASC,IAAI,SAACX,GACnB,OAAOJ,EAAAC,EAAAC,cAACc,EAAD,CAAMb,IAAKC,EAAQC,GAAID,QAASA,UCRpCa,SAAY,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,YAAaC,EAAmBF,EAAnBE,aACvC,OACEpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAY,SAAA,KACEb,EAAAC,EAAAC,cAAA,SACEI,UAAU,SACVe,KAAK,SACLF,YAAaA,EAEbG,SAAUF,OCyCHG,qBA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBFP,aAAe,SAACW,GACdP,EAAKQ,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtCX,EAAKY,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IALHT,mFAUM,IAAAa,EAAAV,KAElBW,MAAM,8CACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAAWL,EAAKL,SAAS,CAAElB,SAAU4B,MAC1CC,MAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,mEAQzB,IAAAC,EAE2BpB,KAAKS,MAA/BtB,EAFDiC,EAECjC,SAAUmB,EAFXc,EAEWd,YACde,EAAmBlC,EAASmC,OAAO,SAAC7C,GAAD,OACrCA,EAAQM,KAAKwC,cAAcC,SAASlB,EAAYiB,iBAGlD,OACElD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAACkD,EAAD,CACEjC,YAAa,kBACbC,aAAcO,KAAKP,eAIrBpB,EAAAC,EAAAC,cAACmD,EAAD,CAAUvC,SAAUkC,YAzCVM,cCDlBC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.56db4517.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Card = (props) => {\n  return (\n    <div key={props.monster.id} className=\"card_container\">\n      <img\n        //we can add a &size url parameter size to custom the size of imported images\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt={`monster${props.monster.id}`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card_list.css\";\nimport { Card } from \"../card/card\";\nimport \"../card/card.css\";\n\n//we can pass properties(parameters to components and access them in the components using props). Also, if we place some elements between <CardList> </CardList>, we can access these elements in the component using props.children\nexport const CardList = (props) => {\n  return (\n    <>\n      <div className=\"card_list\">\n        {props.monsters.map((monster) => {\n          return <Card key={monster.id} monster={monster}></Card>;\n        })}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./search_box.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        //onChnage takes a callback function with a parameter that repressents a synthetic event (e here). e.target.value represents the value that is typed into the search bar\n        onChange={handleChange}\n      />\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card_list\";\nimport { SearchBox } from \"./components/search_box/search_box\";\nimport \"./app.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  //componentDidMount gets called automatically by React when a render happens\n  componentDidMount() {\n    //when you call fetch, it returns you a promise. If fetching is successfull, it will resolve. If it is not, for example if the server is down, or we do not have permissions to access the data, it will give a reject.\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch((error) => console.log(\"Error fetching the user data\"));\n  }\n\n  //A user-defined class method\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    //!!!destructuring!!!\n    const { monsters, searchField } = this.state;\n    let filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n\n        <SearchBox\n          placeholder={\"search monsters\"}\n          handleChange={this.handleChange}\n        ></SearchBox>\n\n        {/* we can pass properties(parameters to components and access them in the components using props). Also, if we place some elements between <CardList> </CardList>, we can access these elements in the component using props.children  */}\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./monsters_rolodex/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}